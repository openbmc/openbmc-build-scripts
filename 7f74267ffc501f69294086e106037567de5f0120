{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "20f1fbad_521468e4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 11,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-08-05T12:59:14Z",
      "side": 1,
      "message": "I really don\u0027t think this is something we want to encourage, is it?  Patching an upstream repository so you can... make tests fail?  Carrying patch files is already disabled in openbmc/openbmc.  If this becomes a thing people do we\u0027ll probably need to do the same in code repos.\n\nI can understand leveraging this feature while you are developing a new feature, maybe.  We should never have patch files checked in to a code repository.",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 11,
        "endChar": 51
      },
      "revId": "7f74267ffc501f69294086e106037567de5f0120",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "73f7b449_7c6698a0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 11,
      "author": {
        "id": 1000937
      },
      "writtenOn": "2022-08-08T06:01:32Z",
      "side": 1,
      "message": "I understand we don\u0027t encourage patching the upstream repository. But I have a special scenario which needs to do this.\n\nThe scenario is:\n\n1. We have a internal patch called `patchA` for a public upstream repo `pubicRepoB`\n\n2. And we have another internal repo `privateRepoC` which depends on `pubicRepoB` + `patchA`\n\n3. Then we run unit test on `privateRepoC`. It will fetch the `pubicRepoB` to the subprojects. However it won\u0027t fetch/apply `patchA` so the unit test will fail due to compile failure.\n\n4. Wo don\u0027t clone a downstream `pubicRepoB` and apply `patchA` because of the maintenance effort.\n\nIn this scenario, if we can specify the patch in the `.wrap` file.\nThen the `patchA` will be auto patching to `pubicRepoB` during fetching, and everything will be fine.",
      "parentUuid": "20f1fbad_521468e4",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 11,
        "endChar": 51
      },
      "revId": "7f74267ffc501f69294086e106037567de5f0120",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "51bc3aad_d753a30b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-08-05T01:50:54Z",
      "side": 1,
      "message": "looks like upstream Yocto has 0.63 now but we haven’t pulled in the subtree update yet. we need to merge this after we do the subtree so we don’t end up with meson files passing CI but not working in the Yocto build. usually we do subtree updates on Friday. either Andrew G or I can try that tomorrow.  ",
      "revId": "7f74267ffc501f69294086e106037567de5f0120",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c32cb92f_e9b25d76",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000937
      },
      "writtenOn": "2022-08-05T02:05:02Z",
      "side": 1,
      "message": "I see, thanks for your help.",
      "parentUuid": "51bc3aad_d753a30b",
      "revId": "7f74267ffc501f69294086e106037567de5f0120",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}