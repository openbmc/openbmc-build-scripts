{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d33e17b4_f35a449e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-04-25T04:04:22Z",
      "side": 1,
      "message": "Why would we want to do this?  There shouldn\u0027t really be any entire-files that are exempt from the clang-tidy rules.  bmcweb does have an \"ignore\" concept for files within projects we don\u0027t own (ie subprojects) but that\u0027s different.\n\nCan you mention why you think this is necessary, along with some examples of where it would be used?  I think that would help quite a bit.",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 11
      },
      "revId": "b4bccfe4e42fe3ed8fd9c8614dbe745c9fcd3338",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "36a443ce_03b81712",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2022-04-25T05:53:39Z",
      "side": 1,
      "message": "By default run-clang-tidy process the files in compile_commands.json.\n\n\u003e Why would we want to do this?  There shouldn\u0027t really be any entire-files that are exempt from the clang-tidy rules.\n\nIf a repo generates code (e.g. with sdbusplus to generate yaml to cpp), the generated cpp files are in compile_commands.json, but we do not really want clang-tidy to process such files:\n* It usually is generated by custom_target, which is OK for regular build, but the file is missing while running clang-tidy\n* The generated files could contain style issues that we do not care to fix.\n\nUsually we do not want clang-tidy check the files in `tests` as well.\n\n\u003e Can you mention why you think this is necessary, along with some examples of where it would be used?  I think that would help quite a bit.\n\nFor example, if you want to enable clang-tidy for phosphor-logging, you could hit the above issues.",
      "parentUuid": "d33e17b4_f35a449e",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 11
      },
      "revId": "b4bccfe4e42fe3ed8fd9c8614dbe745c9fcd3338",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "638f2aba_80813cf9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-04-25T14:46:40Z",
      "side": 1,
      "message": "\u003e By default run-clang-tidy process the files in compile_commands.json.\n\u003e \n\u003e \u003e Why would we want to do this?  There shouldn\u0027t really be any entire-files that are exempt from the clang-tidy rules.\n\u003e \n\u003e If a repo generates code (e.g. with sdbusplus to generate yaml to cpp), the generated cpp files are in compile_commands.json, but we do not really want clang-tidy to process such files:\n\n\nI don\u0027t think that is true.  Even in the case where you\u0027re generating files, the files should still pass tidy checks.  bmcweb does exactly what you described already.  Just because it\u0027s generated doesn\u0027t mean that the tidy checks are invalid, and if they truly are, the script can generate NOLINTNEXTLINE entries for the parts that it knows are valid in the generated code.\n\n\u003e * It usually is generated by custom_target, which is OK for regular build, but the file is missing while running clang-tidy\n\nThe fix to that I believe is here:\nhttps://gerrit.openbmc-project.xyz/c/openbmc/openbmc-build-scripts/+/51391\n\n\u003e * The generated files could contain style issues that we do not care to fix.\n\nWhy not?  It seems relatively doable to just fix the style when we build the script, or simply make the script add // clang-format off to ignore styling altogether.  bmcweb does the later in some cases already.\n\n\u003e \n\u003e Usually we do not want clang-tidy check the files in `tests` as well.\n\nNot true.  Tests should pass the same checks, or, if a pattern is explicitly deemed ok for tests, use // NOLINTNEXTLINE, or an explicit .clang-tidy file in the tests folder to handle that case.\n\n\u003e \n\u003e \u003e Can you mention why you think this is necessary, along with some examples of where it would be used?  I think that would help quite a bit.\n\u003e \n\u003e For example, if you want to enable clang-tidy for phosphor-logging, you could hit the above issues.\n\nCan you list some specific tidy tests that we wouldn\u0027t want enabled, and which generated files we wouldn\u0027t want them enabled on?",
      "parentUuid": "36a443ce_03b81712",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 11
      },
      "revId": "b4bccfe4e42fe3ed8fd9c8614dbe745c9fcd3338",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "20fb8573_51db2b32",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2022-04-26T03:58:15Z",
      "side": 1,
      "message": "\u003e The fix to that I believe is here:\nhttps://gerrit.openbmc-project.xyz/c/openbmc/openbmc-build-scripts/+/51391\n\nGood to know.\nDo you use clang-tidy to check the server.cpp generated from yaml by sdbusplus?\nIf you do, you will see there are plenty of `readability-identifier-naming` errors like emit_added, emit_removed, _callback_get_xxx, _callback_set_xxx, that are generated by sdbusplus.\n\nI do not care or bother to fix such case styles for the sdbusplus generated code, as long as I trust the generator.",
      "parentUuid": "638f2aba_80813cf9",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 11
      },
      "revId": "b4bccfe4e42fe3ed8fd9c8614dbe745c9fcd3338",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9b0cff6f_cfc813d2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-19T15:24:49Z",
      "side": 1,
      "message": "\u003e \u003e The fix to that I believe is here:\n\u003e https://gerrit.openbmc-project.xyz/c/openbmc/openbmc-build-scripts/+/51391\n\u003e \n\u003e Good to know.\n\u003e Do you use clang-tidy to check the server.cpp generated from yaml by sdbusplus?\n\nI don\u0027t, and the subproject pattern ignores sdbusplus as a folder, but I don\u0027t maintain any projects that rely on the yaml definitions.\n\n\u003e If you do, you will see there are plenty of `readability-identifier-naming` errors like emit_added, emit_removed, _callback_get_xxx, _callback_set_xxx, that are generated by sdbusplus.\n\nSo add them to the clang-tidy ignore directives (look at dbus-sensors .clang-tidy for how to do that) or get the generator to add // NOLINTBEGIN and //NOLINTEND to the generated sections that fail.\n\n\u003e \n\u003e I do not care or bother to fix such case styles for the sdbusplus generated code, as long as I trust the generator.\n\nMy position is still the same, generated code should follow the same style guidelines as human written code, or, if it has its own style, write a .clang-tidy file that matches the style it generates.",
      "parentUuid": "20fb8573_51db2b32",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 11
      },
      "revId": "b4bccfe4e42fe3ed8fd9c8614dbe745c9fcd3338",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3bb589bc_83e423c8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-04-25T18:53:19Z",
      "side": 1,
      "message": "Is this a standard file name or one we made up?  I don\u0027t really want to keep adding these undocumented OpenBMC-specific files.\n\n\u0027trunk.io\u0027 has matured enough where it can be used by us, so I plan to write up a design for how to incorporate that in the near future.  That will allow us to use many more off-the-shelf linters with very little effort on our part.  It would be nice if we could align with how clang-tidy and/or trunk.io handle this process so we can easily transition away from our custom code to something else.",
      "revId": "b4bccfe4e42fe3ed8fd9c8614dbe745c9fcd3338",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "86daa86a_432b1f06",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2022-04-26T03:58:15Z",
      "side": 1,
      "message": "\u003e Is this a standard file name or one we made up?  I don\u0027t really want to keep adding these undocumented OpenBMC-specific files.\n\nI see this file name in some open source repos, e.g.\n- https://github.com/vmware/concord-bft/blob/master/.clang-tidy-ignore\n- https://github.com/apache/arrow/blob/master/.clang-tidy-ignore\n\n\u003e \u0027trunk.io\u0027 has matured enough where it can be used by us, so I plan to write up a design for how to incorporate that in the near future.  \n\nGood to konw.\nBut we do want to have ability to run the repo-ci locally instead of putting it online. The tools in openbmc-build-scripts are good for us in daily development that we usually run the local repo-ci before submitting patches to gerrit.",
      "parentUuid": "3bb589bc_83e423c8",
      "revId": "b4bccfe4e42fe3ed8fd9c8614dbe745c9fcd3338",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2864f80_b9da6e67",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-04-26T04:56:33Z",
      "side": 1,
      "message": "\u003e But we do want to have ability to run the repo-ci locally instead of putting it online. \n\ntrunk can be ran locally.  I plan to get it (and all the corresponding linters) added to the Docker image once/if we go that route.",
      "parentUuid": "86daa86a_432b1f06",
      "revId": "b4bccfe4e42fe3ed8fd9c8614dbe745c9fcd3338",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6bb58bf8_ee46899b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2022-04-26T06:31:23Z",
      "side": 1,
      "message": "That will be great",
      "parentUuid": "d2864f80_b9da6e67",
      "revId": "b4bccfe4e42fe3ed8fd9c8614dbe745c9fcd3338",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "563b0707_6e9599f3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-19T15:24:49Z",
      "side": 1,
      "message": "\u003e I don\u0027t really want to keep adding these undocumented OpenBMC-specific files.\n\n+1",
      "parentUuid": "6bb58bf8_ee46899b",
      "revId": "b4bccfe4e42fe3ed8fd9c8614dbe745c9fcd3338",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "171782c8_1a4cccb8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2022-04-26T04:11:54Z",
      "side": 1,
      "message": "To clarify, this patch does NOT change the existing behavior if the repo does NOT have .clang-tidy-ignore.\nIt only use the new logic to find and filter files to check if .clang-tidy-ignore exists.\nSo it will not impact existing repos.",
      "revId": "b4bccfe4e42fe3ed8fd9c8614dbe745c9fcd3338",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "74025a8c_3874116d",
        "filename": "scripts/unit-test.py",
        "patchSetId": 1
      },
      "lineNbr": 766,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-05-10T23:57:45Z",
      "side": 1,
      "message": "Can we please not implement this in-line. Pull it out into a separate function for determining the file set.",
      "range": {
        "startLine": 756,
        "startChar": 0,
        "endLine": 766,
        "endChar": 75
      },
      "revId": "b4bccfe4e42fe3ed8fd9c8614dbe745c9fcd3338",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ea81ed1c_b08ae3ba",
        "filename": "scripts/unit-test.py",
        "patchSetId": 1
      },
      "lineNbr": 766,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-05-11T00:00:56Z",
      "side": 1,
      "message": "Also, please use actual sets and set operations. You\u0027re calculating the set difference of the two lists.",
      "parentUuid": "74025a8c_3874116d",
      "range": {
        "startLine": 756,
        "startChar": 0,
        "endLine": 766,
        "endChar": 75
      },
      "revId": "b4bccfe4e42fe3ed8fd9c8614dbe745c9fcd3338",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7ef1c40f_60e1a0f8",
        "filename": "scripts/unit-test.py",
        "patchSetId": 1
      },
      "lineNbr": 766,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2022-07-19T11:25:20Z",
      "side": 1,
      "message": "\u003e Can we please not implement this in-line. Pull it out into a separate function for determining the file set.\n\nMoved into a separated function.\n\n\u003e Also, please use actual sets and set operations. You\u0027re calculating the set difference of the two lists.\n\nNot really, the filter_list could contain a string of folder, e.g. `test/`, so that any files in `test/` will be filtered. It\u0027s not really set operations.",
      "parentUuid": "ea81ed1c_b08ae3ba",
      "range": {
        "startLine": 756,
        "startChar": 0,
        "endLine": 766,
        "endChar": 75
      },
      "revId": "b4bccfe4e42fe3ed8fd9c8614dbe745c9fcd3338",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc7f094d_00c6d76a",
        "filename": "scripts/unit-test.py",
        "patchSetId": 1
      },
      "lineNbr": 785,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-04-25T04:04:22Z",
      "side": 1,
      "message": "This is going to break the \"ignore\" filtering that already exists in places like bmcweb, and is also going to ignore clang-tidy for generated files, neither of which seem good.",
      "range": {
        "startLine": 785,
        "startChar": 37,
        "endLine": 785,
        "endChar": 52
      },
      "revId": "b4bccfe4e42fe3ed8fd9c8614dbe745c9fcd3338",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2a5169d9_6ef01628",
        "filename": "scripts/unit-test.py",
        "patchSetId": 1
      },
      "lineNbr": 785,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2022-04-25T05:53:39Z",
      "side": 1,
      "message": "\u003e This is going to break the \"ignore\" filtering that already exists in places like bmcweb, and is also going to ignore clang-tidy for generated files, neither of which seem good.\n\nHow does bmcweb handle the \"ignore\" filter?\n\nWhy do we care about generated files?",
      "parentUuid": "bc7f094d_00c6d76a",
      "range": {
        "startLine": 785,
        "startChar": 37,
        "endLine": 785,
        "endChar": 52
      },
      "revId": "b4bccfe4e42fe3ed8fd9c8614dbe745c9fcd3338",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e949bd00_d9fafe41",
        "filename": "scripts/unit-test.py",
        "patchSetId": 1
      },
      "lineNbr": 785,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-04-25T14:46:40Z",
      "side": 1,
      "message": "\u003e \u003e This is going to break the \"ignore\" filtering that already exists in places like bmcweb, and is also going to ignore clang-tidy for generated files, neither of which seem good.\n\u003e \n\u003e How does bmcweb handle the \"ignore\" filter?\n\nTake a look inside bmcweb in the subprojects folder.\n\n\u003e \n\u003e Why do we care about generated files?\n\nBecause people still need to debug generated files, and generated files can still have memory and lifetime safety issues that tidy can check.  Having a consistent rules applied across a repo is helpful in removing entire classes of bugs.",
      "parentUuid": "2a5169d9_6ef01628",
      "range": {
        "startLine": 785,
        "startChar": 37,
        "endLine": 785,
        "endChar": 52
      },
      "revId": "b4bccfe4e42fe3ed8fd9c8614dbe745c9fcd3338",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4180614c_e827e788",
        "filename": "scripts/unit-test.py",
        "patchSetId": 1
      },
      "lineNbr": 785,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2022-04-26T04:11:54Z",
      "side": 1,
      "message": "\u003e This is going to break the \"ignore\" filtering that already exists in places like bmcweb, and is also going to ignore clang-tidy for generated files, neither of which seem good.\n\nTo clarify, this patch does NOT change the existing behavior if the repo does NOT have .clang-tidy-ignore.\nIt only use the new logic to find and filter files to check if .clang-tidy-ignore exists.\nSo it will not impact existing repos.",
      "parentUuid": "e949bd00_d9fafe41",
      "range": {
        "startLine": 785,
        "startChar": 37,
        "endLine": 785,
        "endChar": 52
      },
      "revId": "b4bccfe4e42fe3ed8fd9c8614dbe745c9fcd3338",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f59ed357_c6d0d1ae",
        "filename": "scripts/unit-test.py",
        "patchSetId": 1
      },
      "lineNbr": 785,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2022-07-19T11:55:37Z",
      "side": 1,
      "message": "Added a description about bmcweb\u0027s CI result in commit message.",
      "parentUuid": "4180614c_e827e788",
      "range": {
        "startLine": 785,
        "startChar": 37,
        "endLine": 785,
        "endChar": 52
      },
      "revId": "b4bccfe4e42fe3ed8fd9c8614dbe745c9fcd3338",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d770e035_6cd82f74",
        "filename": "scripts/unit-test.py",
        "patchSetId": 1
      },
      "lineNbr": 785,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-19T15:24:49Z",
      "side": 1,
      "message": "I still think there are better paths here than having a blanket ignore list.  Why does the pattern we use here:\nhttps://github.com/openbmc/bmcweb/blob/master/subprojects/.clang-tidy\n\nNot work for the sdbusplus generated yaml case?",
      "parentUuid": "f59ed357_c6d0d1ae",
      "range": {
        "startLine": 785,
        "startChar": 37,
        "endLine": 785,
        "endChar": 52
      },
      "revId": "b4bccfe4e42fe3ed8fd9c8614dbe745c9fcd3338",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8e2a5253_346210a8",
        "filename": "scripts/unit-test.py",
        "patchSetId": 1
      },
      "lineNbr": 785,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2022-10-14T23:36:36Z",
      "side": 1,
      "message": "I do agree that in general the `Check` filter is better to ignore the checks.\n\nI do also see some cases where the ignore files is good to have to move forward the project.\n\nFor example, if we hit `clang-diagnostic-error` errors that is from other repos and blocking other changes from being submitted. In cases where the fix is not trivial, it is good to have a workaround the error until that is resolved.\n\nWe cannot filter that check since that should be program breaking... but still build/run fine. For example, https://discord.com/channels/775381525260664832/775381525260664836/1030103361166524416\n\nWe can either disable clang-tidy or ignore the files hitting the issue until it is resolved.\n\n---\n\nOn other note, can\u0027t it just use\n\n```\nninja clang-tidy\n```\nfor meson?",
      "parentUuid": "d770e035_6cd82f74",
      "range": {
        "startLine": 785,
        "startChar": 37,
        "endLine": 785,
        "endChar": 52
      },
      "revId": "b4bccfe4e42fe3ed8fd9c8614dbe745c9fcd3338",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca9d2791_a4919bfc",
        "filename": "scripts/unit-test.py",
        "patchSetId": 1
      },
      "lineNbr": 1003,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-05-10T23:57:45Z",
      "side": 1,
      "message": "This is duplicate of the above? See my feedback on making this an independent function.",
      "range": {
        "startLine": 992,
        "startChar": 0,
        "endLine": 1003,
        "endChar": 75
      },
      "revId": "b4bccfe4e42fe3ed8fd9c8614dbe745c9fcd3338",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bd11b19b_378ebe57",
        "filename": "scripts/unit-test.py",
        "patchSetId": 1
      },
      "lineNbr": 1003,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2022-07-19T11:25:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ca9d2791_a4919bfc",
      "range": {
        "startLine": 992,
        "startChar": 0,
        "endLine": 1003,
        "endChar": 75
      },
      "revId": "b4bccfe4e42fe3ed8fd9c8614dbe745c9fcd3338",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}