{
  "comments": [
    {
      "key": {
        "uuid": "6dd085c2_68865dee",
        "filename": "scripts/format-code.sh",
        "patchSetId": 4
      },
      "lineNbr": 117,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-09-30T11:53:41Z",
      "side": 1,
      "message": "There is some variability here depending on how the user has `core.whitespace` set up.  Do we need to explicitly set the config for this invocation?\n\nFor instance, should we enable `tab-in-indent`?  Ironically this file would fail if re-added due to failing `blank-at-eof`, which is enabled by default, but I personally hate as a default check.  We should probably enable `cr-at-eol` since this has come up as an issue on multiple occasions.",
      "revId": "f7c302a87b28f2b32710556608d3f0a441f0cb61",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "439a1f9e_c6941e1e",
        "filename": "scripts/format-code.sh",
        "patchSetId": 4
      },
      "lineNbr": 117,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-09-30T15:53:15Z",
      "side": 1,
      "message": "\u003e There is some variability here depending on how the user has `core.whitespace` set up.  Do we need to explicitly set the config for this invocation?\n\nThat\u0027s a fair point, I guess I was under the impression that only CI ran this particular script.  I\u0027m not sure how to override git settings on a per-command basis, but I\u0027m guessing I\u0027m about to google that.\n\n\u003e \n\u003e For instance, should we enable `tab-in-indent`?\n\nProbably?  If we do, I suspect we\u0027ll need a .gitattributes file to make sure we don\u0027t accidentally try to enforce that on binary files (maybe there\u0027s an easier way?).  Is it ok if I push that to a subsequent patch, or do you think it needs to be part of this one?\n\n\u003e  Ironically this file would fail if re-added due to failing `blank-at-eof`, which is enabled by default, but I personally hate as a default check.  We should probably enable `cr-at-eol` since this has come up as an issue on multiple occasions.\n\nCan do.",
      "parentUuid": "6dd085c2_68865dee",
      "revId": "f7c302a87b28f2b32710556608d3f0a441f0cb61",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cfe7e61d_23f9f048",
        "filename": "scripts/format-code.sh",
        "patchSetId": 4
      },
      "lineNbr": 117,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-09-30T17:05:55Z",
      "side": 1,
      "message": "\u003e That\u0027s a fair point, I guess I was under the impression that only CI ran this particular script.\n\nI know I run it sometimes, but I might be a minority.  I think I run it inside the CI container when I run it locally though so maybe it matters less.\n\n\u003e I\u0027m not sure how to override git settings on a per-command basis, but I\u0027m guessing I\u0027m about to google that.\n\n  `git -c core.whitespace\u003d...`\n\n\u003e Probably?  If we do, I suspect we\u0027ll need a .gitattributes file to make sure we don\u0027t accidentally try to enforce that on binary files (maybe there\u0027s an easier way?).\n\nI wonder what `git show --check` even does with binary files.  I couldn\u0027t see anything obvious from the documentation or a quick search...  Maybe we just ignore that binary files exist, hope it does the expected thing (not apply settings to binary files) and fix it when it does the wrong thing?",
      "parentUuid": "439a1f9e_c6941e1e",
      "revId": "f7c302a87b28f2b32710556608d3f0a441f0cb61",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}