{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "44377f89_0b1238c5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-11-29T18:57:45Z",
      "side": 1,
      "message": "https://gerrit.openbmc.org/c/openbmc/pldm/+/67050 as an example",
      "revId": "e591dcc2e48bc73284d5b28cfbde8cafccad82e9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e5281588_e1a99bf0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-11-29T20:39:41Z",
      "side": 1,
      "message": "Please no, the point is that we know there cannot be users until the API is marked stable. It\u0027s easy though to retrigger CI when the stabilisation patch is merged in libpldm.",
      "revId": "e591dcc2e48bc73284d5b28cfbde8cafccad82e9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fe70fa63_1bde8692",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-11-29T21:19:12Z",
      "side": 1,
      "message": "I don’t really understand what the expected sequence is then. Why do we even bother with two commits to libpldm?\n\nMy concern is that:\n- Nobody will review PLDM changes that are failing CI. \n- Nobody will give adequate feedback on an unused libpldm API.\n\nSeems like a chicken-and-egg dilemma.",
      "parentUuid": "e5281588_e1a99bf0",
      "revId": "e591dcc2e48bc73284d5b28cfbde8cafccad82e9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "207cc2cf_bd1ae072",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-11-29T21:59:25Z",
      "side": 1,
      "message": "We break that by asking people to review the PLDM change failing CI. I ask that stabilisation patches include links to patches containing use of the API. I review those patches, and in the process often ask others to review them too.\n\nI appreciate that people instinctively won\u0027t review patches failing CI, but we route around that here by starting conversations via the stabilisation patch to libpldm.",
      "parentUuid": "fe70fa63_1bde8692",
      "revId": "e591dcc2e48bc73284d5b28cfbde8cafccad82e9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e92506a1_ece541f3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-11-29T22:10:49Z",
      "side": 1,
      "message": "\u003e I don’t really understand what the expected sequence is then. Why do we even bother with two commits to libpldm?\n\nAllowing new APIs to be merged but not immediately exposed allows people to test those APIs locally without also distributing the problem of applying patches. This makes life easier for more extensive changes such as the introduction of the transport and instance ID APIs. The overhead for adding single functions is a little unfortunate. However, the trade-off of allowing us to automatically detect API and ABI breakage in CI while also not immediately committing to any old function we merge weighs much more in favour of living with that overhead.",
      "parentUuid": "207cc2cf_bd1ae072",
      "revId": "e591dcc2e48bc73284d5b28cfbde8cafccad82e9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}