{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "96b67a44_9e835ad1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-13T11:02:17Z",
      "side": 1,
      "message": "I\u0027m honestly quite surprised to see that there is pldm CPER support without a single design document update.  CPER is a pretty pervasive architecture element and it seems that the pldm repository decided to \"do their own thing\" by shoving CPER files into /var/cper.  There was already existing design discussions around CPER related to both event log and phosphor-debug-collector, and you just blew through all that and did your own thing.",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 12,
        "endChar": 12
      },
      "revId": "b3eec9923afe32993e6fff5ae83e1b24b66b127d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ee24648_43e4a62e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2025-05-13T12:58:32Z",
      "side": 1,
      "message": "I am not sure where this discussion was ?\n\nAnd as far as I am aware @thu@os.amperecomputing.com implemented the CPER handler in pldm for ampere systems. And I do remember that we talked about the dumps \u0026 the event logs \u0026 both were discussed with the community (`Ed` was also involved in the discussions on discord).\n\nThis is how the flow is : pldm stack gets a event of type CPER from remote endpoint, in response to that pldm stack would call `CreateDump` \u0026 creates a `fault log` entry, which would be pulled by the redfish clients using the fault log redfish attachment. \n\nAnd Ampere also had this requirement for IPMI OEM SEL, where they want to send some fields in the CPER records to log a SEL, hence they were using the libcper in pldm (under oem-ampere).\n\nNone of the mentioned above items seems too much weird to me, so I allowed it. We can definitely revisit this if pldm is doing something odd when rest of the community is doing something else.",
      "parentUuid": "96b67a44_9e835ad1",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 12,
        "endChar": 12
      },
      "revId": "b3eec9923afe32993e6fff5ae83e1b24b66b127d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "768dfa1d_be10ea8a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-14T13:09:53Z",
      "side": 1,
      "message": "\u003e I am not sure where this discussion was ?\n\nThere have been discussions in both discord and in docs, as I said.  There\u0027s even a TOF issue pending: https://github.com/openbmc/technical-oversight-forum/issues/24\n\nThere is also related PDI interfaces for CPER events proposed and getting feedback: https://gerrit.openbmc.org/c/openbmc/phosphor-dbus-interfaces/+/78683\n\n\u003e This is how the flow is : pldm stack gets a event of type CPER from remote endpoint, in response to that pldm stack would call CreateDump \u0026 creates a fault log entry, which would be pulled by the redfish clients using the fault log redfish attachment.\n\nSo you\u0027ve now come up with a cross-repository design flow with no design document?  Is Jayanth, maintainer of phosphor-debug-collector and one of the drivers of this crash dump support, involved in this design decision?\n\n\u003e And Ampere also had this requirement for IPMI OEM SEL, where they want to send some fields in the CPER records to log a SEL, hence they were using the libcper in pldm (under oem-ampere).\n\nYes, this is one of the problems with CPER.  Some people want to treat it as a \"crashdump\" and some people want to treat it as an \"event\".  You even see that in your own repository that there are two different approaches!  This is exactly why we need to come to discussion and consensus before we have repositories doing random things.",
      "parentUuid": "7ee24648_43e4a62e",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 12,
        "endChar": 12
      },
      "revId": "b3eec9923afe32993e6fff5ae83e1b24b66b127d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "88a782f4_dbd62a20",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2025-05-15T09:34:02Z",
      "side": 1,
      "message": "Hi Patrick,\n\nThe current implementation of platform-mc code to handle PLDM CPER event is based on UEFI CPER spec, PLDM CPER event class.\nAs section `16.17 eventData format for CPEREvent` of DSP0248 V1.3.0, PLDM CPER event class includes CPER data (format 0: A chunk of CPER formatted data including record header, section descriptions and one or more sections, as described in UEFI Specification appendix N â€“ Common Platform Error Record).\nThe `CPER data` is different between GUIID (OEM and CPER Source), Notify type. That why in the common PLDM code as platform-mc, we decide to just log those data to a unique file name which can be downloaded thru redfish. The download file then can be decoded to CPER record data use libCPER which already support different GUIID, Notify type from different OEM (ARM, AMPERE, ADM, UEFI...)\n\nThe way we log that file is also common use CreateDump method in Dump.Create D-Bus interface https://github.com/openbmc/phosphor-dbus-interfaces/blob/master/yaml/xyz/openbmc_project/Dump/Create.interface.yaml\nIn the current design of OpenBMC,`Dump.Create` D-Bus interface is only hosted by `phosphor-debug-collector` but it does not mean that CPER data will be logged by `phosphor-debug-collector`.\n\nAbout the AMD RAS design doc and them TOF, look at the high level flow, they also log CPER to Dump.faultLog https://gerrit.openbmc.org/c/openbmc/docs/+/68440/20/designs/oem/amd/amd-bmc-ras.md#145\nAt this moment, Ampere, Arm and AMD is using Dump.Faultlog to carry CPER Data to user thru Redfish and the log data is in hex bytes format.\n\nIt seems Meta has different thought and want to log CPER data in decoded json format.",
      "parentUuid": "768dfa1d_be10ea8a",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 12,
        "endChar": 12
      },
      "revId": "b3eec9923afe32993e6fff5ae83e1b24b66b127d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec61079a_c9b2c63f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-15T10:52:21Z",
      "side": 1,
      "message": "\u003e At this moment, Ampere, Arm and AMD is using Dump.Faultlog to carry CPER Data to user thru Redfish and the log data is in hex bytes format.\n\n\u003e It seems Meta has different thought and want to log CPER data in decoded json format.\n\nI don\u0027t know what Arm is doing because they are not participating in the community here, for the most part.  Nvidia is seeming to use the Redfish log path, which is why Meta has been going that direction.  Redfish has explicit handling for CPER; don\u0027t we want to use that?\n\nThis is the part where we need consensus on the upstream implementation and why I\u0027m annoyed that the people working on PLDM just made decisions without even mentioning they were making decisions.  At least everyone else has been discussing in much broader places (ie. discord and docs).",
      "parentUuid": "88a782f4_dbd62a20",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 12,
        "endChar": 12
      },
      "revId": "b3eec9923afe32993e6fff5ae83e1b24b66b127d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}