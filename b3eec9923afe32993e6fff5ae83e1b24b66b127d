{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "96b67a44_9e835ad1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-13T11:02:17Z",
      "side": 1,
      "message": "I\u0027m honestly quite surprised to see that there is pldm CPER support without a single design document update.  CPER is a pretty pervasive architecture element and it seems that the pldm repository decided to \"do their own thing\" by shoving CPER files into /var/cper.  There was already existing design discussions around CPER related to both event log and phosphor-debug-collector, and you just blew through all that and did your own thing.",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 12,
        "endChar": 12
      },
      "revId": "b3eec9923afe32993e6fff5ae83e1b24b66b127d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ee24648_43e4a62e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2025-05-13T12:58:32Z",
      "side": 1,
      "message": "I am not sure where this discussion was ?\n\nAnd as far as I am aware @thu@os.amperecomputing.com implemented the CPER handler in pldm for ampere systems. And I do remember that we talked about the dumps \u0026 the event logs \u0026 both were discussed with the community (`Ed` was also involved in the discussions on discord).\n\nThis is how the flow is : pldm stack gets a event of type CPER from remote endpoint, in response to that pldm stack would call `CreateDump` \u0026 creates a `fault log` entry, which would be pulled by the redfish clients using the fault log redfish attachment. \n\nAnd Ampere also had this requirement for IPMI OEM SEL, where they want to send some fields in the CPER records to log a SEL, hence they were using the libcper in pldm (under oem-ampere).\n\nNone of the mentioned above items seems too much weird to me, so I allowed it. We can definitely revisit this if pldm is doing something odd when rest of the community is doing something else.",
      "parentUuid": "96b67a44_9e835ad1",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 12,
        "endChar": 12
      },
      "revId": "b3eec9923afe32993e6fff5ae83e1b24b66b127d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "768dfa1d_be10ea8a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-14T13:09:53Z",
      "side": 1,
      "message": "\u003e I am not sure where this discussion was ?\n\nThere have been discussions in both discord and in docs, as I said.  There\u0027s even a TOF issue pending: https://github.com/openbmc/technical-oversight-forum/issues/24\n\nThere is also related PDI interfaces for CPER events proposed and getting feedback: https://gerrit.openbmc.org/c/openbmc/phosphor-dbus-interfaces/+/78683\n\n\u003e This is how the flow is : pldm stack gets a event of type CPER from remote endpoint, in response to that pldm stack would call CreateDump \u0026 creates a fault log entry, which would be pulled by the redfish clients using the fault log redfish attachment.\n\nSo you\u0027ve now come up with a cross-repository design flow with no design document?  Is Jayanth, maintainer of phosphor-debug-collector and one of the drivers of this crash dump support, involved in this design decision?\n\n\u003e And Ampere also had this requirement for IPMI OEM SEL, where they want to send some fields in the CPER records to log a SEL, hence they were using the libcper in pldm (under oem-ampere).\n\nYes, this is one of the problems with CPER.  Some people want to treat it as a \"crashdump\" and some people want to treat it as an \"event\".  You even see that in your own repository that there are two different approaches!  This is exactly why we need to come to discussion and consensus before we have repositories doing random things.",
      "parentUuid": "7ee24648_43e4a62e",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 12,
        "endChar": 12
      },
      "revId": "b3eec9923afe32993e6fff5ae83e1b24b66b127d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}